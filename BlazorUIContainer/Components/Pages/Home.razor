@page "/{requestGuid:guid?}"
@using BlazorDatasheet
@using BlazorDatasheet.Core
@using BlazorDatasheet.Core.Data
@using Microsoft.AspNetCore.WebUtilities
@inject QueueService QueueService
<Datasheet Sheet="sheet" />
@code {
    [Parameter]
    public Guid? requestGuid { get; set; }

    private Sheet sheet;
    private string QueueMessage = "";
    private string CurrentGUID = "";

    protected override async Task OnInitializedAsync()
    {
        if (requestGuid != null)
        {
            if (requestGuid.ToString() == CurrentGUID)
            {
                await LoadDataSheet();
            }
        }
        else
        {
            await LookForWork();
        }
    }

    private async Task LookForWork()
    {
        // Start a loop where we will read the queue every 5 seconds
        while (true)
        {
            QueueMessage = await QueueService.ReadMessageAsync("request-queue");

            if (QueueMessage != null)
            {
                await MakeContainerAvalable();
                break;
            }

            await Task.Delay(5000);
        }
    }

    private async Task MakeContainerAvalable()
    {
        // Create a new GUID
        CurrentGUID = Guid.NewGuid().ToString();

        // Send the GUID to the available queue
        await QueueService.SendMessageAsync("available-queue", CurrentGUID);
    }

    private async Task LoadDataSheet()
    {
        sheet = new Sheet(3, 3);
    }
}