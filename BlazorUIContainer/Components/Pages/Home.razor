@page "/{requestGuid:guid?}"
@using BlazorDatasheet
@using BlazorDatasheet.Core
@using BlazorDatasheet.Core.Data

@inject NavigationManager NavigationManager
@inject StorageService StorageService
@inject WorkState WorkState

<h3>Latest Queue Message</h3>

@if (string.IsNullOrEmpty(WorkState.CurrentMessage))
{
    <p>No message received yet.</p>
}
else
{
    <p>@WorkState.CurrentMessage</p>
}

@if (sheet is not null)
{
    <Datasheet Sheet="sheet" />
}

@code {
    [Parameter]
    public Guid? requestGuid { get; set; }

    private const string BlobContainer = "current-container";
    private const string AvailableQueueName = "available-queue";
    private Sheet sheet;

    protected override async Task OnInitializedAsync()
    {
        var CurrentGuid = WorkState.CurrentMessage;

        if (CurrentGuid != null)
        {
            // Read existing blob (if needed)
            var existing = await StorageService.ReadBlobAsync(BlobContainer, CurrentGuid);

            // Upload current URL as the “response”
            await StorageService.UploadBlobAsync(BlobContainer, CurrentGuid, NavigationManager.Uri);

            // Notify queue that this GUID is now available
            await StorageService.SendQueueMessageAsync(AvailableQueueName, CurrentGuid);
        }
    }

    protected override void OnParametersSet()
    {
        if (!requestGuid.HasValue)
            return;

        var ParamGuidString = requestGuid.Value.ToString();

        var CurrentGuid = WorkState.CurrentMessage;

        if (CurrentGuid != null)
        {
            if (CurrentGuid == ParamGuidString)
            {
                LoadDataSheet();
                return;
            }
        }
    }

    private void LoadDataSheet()
    {
        sheet = new Sheet(3, 3);
    }
}