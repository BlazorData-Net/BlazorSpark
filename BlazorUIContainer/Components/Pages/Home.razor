@page "/{requestGuid:guid?}"
@using BlazorDatasheet
@using BlazorDatasheet.Core
@using BlazorDatasheet.Core.Data
@using System.Globalization
@inject NavigationManager NavigationManager
@inject StorageService StorageService
@inject GUIDService GUIDService

@if (!requestGuid.HasValue)
{
    <p>No valid GUID was received.</p>
}
else
{
    @if (isLoading)
    {
        @if (sheet is not null)
        {
            <Datasheet Sheet="sheet" />
        }
        else
        {
            <p>Loading...</p>
        }
    }
}

@code {
    [Parameter]
    public Guid? requestGuid { get; set; }
    private string CurrentGuid { get; set; }
    private const string BlobContainer = "current-container";

    private Sheet sheet;
    private static readonly string[] Names = new[] 
    { "Alice", "Bob", "Charlie", "Diana", "Eve", "Frank", "Grace", "Henry" };

    private Random rand = new();
    private bool isLoading = false;

    protected override async Task OnInitializedAsync()
    {
        if (requestGuid.HasValue)
        {
            // Set the current GUID
            CurrentGuid = requestGuid.Value.ToString();

            // Read existing blob
            var existing = await StorageService.ReadBlobAsync(BlobContainer, CurrentGuid);

            if (existing != null)
            {
                isLoading = true;
                StateHasChanged();

                // Set the current GUID (BlobName) and Container in the GUID service
                // to be used by the CustomCircuitHandler
                // to remove the blob when the user navigates away
                GUIDService.ContainerName = BlobContainer;
                GUIDService.BlobName = CurrentGuid;

                // Upload the object with the current URL as the “response”
                await StorageService.UploadBlobAsync(BlobContainer, CurrentGuid, NavigationManager.Uri);

                // Load the data sheet
                await LoadDataSheet();
            }
        }
    }

    private async Task LoadDataSheet()
    {       
        await Task.Run(() =>
        {
            // Create a new sheet with 1 million rows and 3 columns
            sheet = new Sheet(1000000, 3);

            for (int row = 0; row < 1000000; row++)
            {
                var name = Names[rand.Next(Names.Length)];
                var number = rand.Next(1, 1001); // 1 to 1000
                var date = DateTime.Now.AddDays(-rand.Next(0, 3650))
                .ToString("yyyy-MM-dd", CultureInfo.InvariantCulture);

                sheet.Cells[row, 0].Value = name;
                sheet.Cells[row, 1].Value = number;
                sheet.Cells[row, 2].Value = date;
            }
        });
    }
}